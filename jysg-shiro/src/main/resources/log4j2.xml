<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--status：用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="1800">
    <Properties>
        <!-- 日志默认存放的位置，这里设置为项目根路径下，也可指定绝对路径 -->
        <!-- ${web:rootDir}是web项目根路径，java项目没有这个变量，需要删掉,否则会报异常 -->
        <Property name="log.dir">D://log4j2Logs//shiro</Property>

        <!-- 控制台默认输出格式，"%-5level":日志级别，"%l":输出完整的错误位置（是小写的L），因为有行号显示，所以影响日志输出的性能 -->
        <property name="console.log.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %l - %m%n</property>
        <!-- 日志文件默认输出格式，不带行号输出(行号显示会影响日志输出性能)；%C：大写类名、%M：方法名、%m：错误信息、%n：换行 -->
        <property name="log.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M - %m%n</property>
        <!-- 控制台显示的日志最低级别 -->
        <property name="console.print.level">DEBUG</property>

        <!-- 日志默认切割的最小单位 -->
        <property name="every.file.size">20MB</property>
        <!-- 日志默认输出级别 -->
        <property name="output.log.level">DEBUG</property>

        <!-- 日志默认存放路径(所有级别日志) -->
        <property name="rolling.fileName">${log.dir}/all.log</property>
        <!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="rolling.filePattern">${log.dir}/%d{yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- 日志默认同类型日志，同一文件夹下可以存放的数量，不设置此属性则默认为7个 -->
        <property name="rolling.max">50</property>

        <!-- Info日志默认存放路径(Info级别日志) -->
        <property name="info.fileName">${log.dir}/info.log</property>
        <!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="info.filePattern">${log.dir}/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="info.max">10</property>

        <!-- Warn日志默认存放路径(Warn级别日志) -->
        <property name="warn.fileName">${log.dir}/warn.log</property>
        <!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="warn.filePattern">${log.dir}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="warn.max">10</property>

        <!-- Error日志默认存放路径(Error级别日志) -->
        <property name="error.fileName">${log.dir}/error.log</property>
        <!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="error.filePattern">${log.dir}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>
        <!-- Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="error.max">10</property>

    </Properties>

    <!--定义appender -->
    <appenders>
        <!-- 用来定义输出到控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 设置控制台只输出level及以上级别的信息(onMatch)，其他的直接拒绝(onMismatch)-->
            <ThresholdFilter level="${console.print.level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 设置输出格式，不设置默认为：%m%n -->
            <PatternLayout pattern="${console.log.pattern}"/>
        </Console>
        <!--打印所有信息到文件，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用
        <File name="log" fileName="log/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>
        -->
        <!-- 打印level级别以上的日志到文件，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFile" fileName="${rolling.fileName}" filePattern="${rolling.filePattern}">
            <PatternLayout pattern="${log.pattern}"/>
            <SizeBasedTriggeringPolicy size="${every.file.size}"/>
            <!-- 设置同类型日志，同一文件夹下可以存放的数量，如果不设置此属性则默认存放7个文件 -->
            <DefaultRolloverStrategy max="${rolling.max}" />
            <!-- 匹配INFO以及以上级别 -->
            <Filters>
                <!-- onMatch="ACCEPT" 表示匹配该级别及以上 -->
                <!-- onMatch="DENY" 表示不匹配该级别及以上 -->
                <!-- onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上 -->
                <!-- onMismatch="ACCEPT" 表示匹配该级别以下 -->
                <!-- onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的 -->
                <!-- onMismatch="DENY" 表示不匹配该级别以下的 -->
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 打印INFO级别的日志到文件 -->
        <RollingFile name="InfoFile" fileName="${info.fileName}" filePattern="${info.filePattern}">
            <PatternLayout pattern="${log.pattern}"/>
            <SizeBasedTriggeringPolicy size="${every.file.size}"/>
            <DefaultRolloverStrategy max="${info.max}" />
            <!-- 匹配INFO级别 -->
            <Filters>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 打印WARN级别的日志到文件 -->
        <RollingFile name="WarnFile" fileName="${warn.fileName}" filePattern="${warn.filePattern}">
            <PatternLayout pattern="${log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every.file.size}"/>
            <DefaultRolloverStrategy max="${warn.max}" />
            <!-- 匹配WARN级别 -->
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 打印ERROR级别的日志到文件 -->
        <RollingFile name="ErrorFile" fileName="${error.fileName}" filePattern="${error.filePattern}">
            <PatternLayout pattern="${log.pattern}"/>
            <SizeBasedTriggeringPolicy size="${every.file.size}"/>
            <DefaultRolloverStrategy max="${error.max}" />
            <!-- 匹配ERROR级别 -->
            <Filters>
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
    </appenders>

    <!--
        全局配置，默认所有的Logger都继承此配置
        配置LoggerConfig，包含一个root logger和若干个普通logger；
        additivity指定是否同时输出log到父类的appender，缺省为true；
        一个Logger可以绑定多个不同的Appender，只有定义了logger并引入的appender，appender才会生效；
     -->
    <loggers>
        <logger name="org.springframework" level="info" additivity="false">
            <appender-ref ref="Console"/>
            <AppenderRef ref="WarnFile"/>
            <AppenderRef ref="ErrorFile"/>
        </logger>
        <!-- 设置对打印sql语句的支持 -->
        <logger name="java.sql" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!-- 默认的root的logger -->
        <root level="${output.log.level}" includeLocation="false">
            <appender-ref ref="RollingFile"/>
            <appender-ref ref="Console"/>
            <appender-ref ref="InfoFile"/>
            <appender-ref ref="WarnFile"/>
            <appender-ref ref="ErrorFile"/>
        </root>
    </loggers>
</configuration>